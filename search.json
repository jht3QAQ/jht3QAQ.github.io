[{"title":"XYCTF2024 Writeup","date":"2024-04-26T16:05:29.000Z","url":"/2024/04/26/XYCTF2024-Writeup/","tags":[["CTF","/tags/CTF/"]],"categories":[["undefined",""]],"content":"1. MISC 1.1. Rosk,Paper,Scissors! 一开始是暴力爆破（就 whilt True: random），后来能看出来规律了就直接找规律了（后面都是[0,0,1,1,2,2]循环），算法什么的根本没管(逃) 1.2. game 这游戏我看过，一眼看出来了，当时还是看的狗乔伊视频认识的BV1f64y1T71B 1.3. 我的二维码为啥扫不出来？ 看出来是行和列选7列反转颜色，然后带方框的4行/列能还原，然后大致张这样： 这时候还剩3行/列没还原，写个脚本爆破一下吧(虽然是爆破 但是也懒得写爆破算法 于是又用的random 反正跑挺快)： 1.4. zzl的护理小课堂 (这不是web题?) 一开始试出全部答案发现没卵用，后来阅读源码发现有本地判断逻辑： 那这就简单了，直接复制下面这段到控制台执行就行： 用postman模拟，懒，不如控制台 1.5. ez_隐写 首先CRC爆破一下，这个随便搬个网上脚本就行，然后就是隐写，搜半天发现有个52pojie的图片隐写工具，拖进去就能看见了： 1.6. 熊博士 啊不是，你这图片有啥用啊?我到现在也没懂 (你这不算古典密码学?) 观察到CBXGU和XYCTF挺像的 至少不同字符差的距离都一样 然后进一步用&quot;CBXGU&quot;-&quot;XYCTF&quot;减一下就能看出规律 然后发现就是把字母表发转了，这就简单了 真是令人印象深刻的flag 1.7. ZIP神之套 不知道为啥这题用john+hashcat爆破不出来，换成ARCHPR秒出 然后一个套一个flag，很明显的明文攻击： 1.8. 出题有点烦 flag.7z爆破密码123456 第五个图片能直接作为zip打开(woc 7z这么nb?) 嗯 然后010看到是尾部附加文件，提取出来，再次爆破 密码xyctf，得到真的flag (欸不是 你那么多图片到底干啥用的?) 1.9. 真&gt;签到 文件打不开就直接拖进010了，然后就 签到了 1.10. 签到 关注公众号发消息即可 1.11. TCPL 啊?你这不算RE？ 按照 教程布置一个riscv环境，然后运行即可，把里面的1换成0就是flag（谁叫我user mode不能直接运行起来呢QAQ） 1.12. 网络追踪 靶机IP倒是好找，回显的就是靶机：192.168.204.133 然后以ip.src == 192.168.204.133作为过滤条件，能看到端口扫描的过程： 然后端口就能出来：445、139、135 然后CVE，这个头疼，因为回显的TCP包上面全是SMB包，猜测就是SMB包打的CVE，然后就是根据SMB包的内容一顿去谷歌瞎搜，什么\\pipe\\spoolss了，什么\\PIPE\\browser了都可能是攻击点，总之最后一顿搜SMB相关的CVE，最后试flag试出来是CVE-2008-4250 完整的flag：XYCTF&#123;192.168.204.133_445_139_135_CVE-2008-4250&#125; 1.13. Osint1 因为有人在小红书上问了，小红书作者还回答了地点，所以大致范围就确定了（小红书链接是百度搜图搜出来的）： 然后江苏省，南通市，黄海，至于什么路，emmm 因为看另外两张图片有好多风车，就卫星地图把带风车的路都塞一遍就完事了，滨海(东西南北)路我印象里好像都填过一遍 flag：xyctf{江苏省|南通市|滨海东路|黄海} 1.14. Osint2 列车好找(大概?) 就是你这火车，为啥中途还会变名字啊，搞得我纠结了半天是G3292还是G3293： 省就简单了，都洛阳龙门了那肯定河南啊 至于去哪玩，又是一顿爆猜，总之最后才出来flag：xyctf{G3293|河南省|老君山} 1.15. EZ_Base1024*2 1.16. Ez_osint 首先能找到网站 然后发现这个网站的ID和事件随线性分布，就，找俩时间接近的帖子，在这之间爬一下公开的帖子： 然后找到帖子： 这评论区也太难崩了 2. Crypto 2.1. happy_to_solve1 呃 这题有点太原题了吧 首先一眼看出最大的问题是sympy.nextprime(p ^ ((1 &lt;&lt; 512) - 1)) 然后去上网搜，毕竟我不会啥密码学 然后就在找到了 题目是2022 zer0pts CTF Anti-Fermat 然后就是把1&lt;&lt;1024换成了1&lt;&lt;512，总之用这个wp的脚本就能解 2.2. Sign1n[签到] 难得有我能看得懂的密码学题 就 多加的减回来就行，swap的换回来就行，就是我咋感觉我处理的这么怪： 2.3. Sign1n_Revenge 内容同Sign1n[签到]，同一个脚本再跑一遍就完事了 3. PWN 终于到我PWN的主场了吗(但是我怎么RE做的最多啊喂) 3.1. hello_world(签到) leak libc然后one gadget 3.2. invisible_flag 通过shellcode进行orw，对函数有限制因此使用了openat pread64和sendto 3.3. fmt 通过exit_hooko来onegadget 3.4. static_link 静态链接，直接ORW 3.5. one_byte 我竟然在比赛快结束的时候打鸡血把这题做出来了 之前只做过板题，对堆不熟，这题libc又比较新，就不太想做 总之unsorted bin leak，在leak的时候记得把tcache耗光 然后one_byte让造成chunk extend造成overlapping 然后改tcache的next地址达到任意写修改free_hook为system（tcache的任意写 感觉比fastbin容易多了 fastbin那个任意写我到现在没布局明白） 3.6. guestbook1 id的最后一位有溢出，能修改rbp变为更小的地址，溢出后两次return会造成栈迁移，能让return落到name段，然后就通过backdoor来getshell 3.7. simple_srop 被限制要ORW了啊，一开始因为找不到大的地址空间写payload卡了半天，后来发现好像随便找个没用过的内存就行 总之先read+栈迁移，然后ORW： 3.8. EZ1.0? 啊?为了这个我还特意学了下mips的PWN流程，啊折磨，大致就是写shellcode到栈上，然后通过还原寄存器让fp得jmp_a2的gadget，然后reutrn到sp2a2_jmp_fp的gadget上，此时会让a2=sp+偏移，然后跳到fp上，执行jmp_a2的gadget，就达到了jmp到栈上shellcode的目的 shllcode换了两个，第二个能pwn成功，第一个远程打不通我也不知道为啥，shllcode来源： 3.9. EZ2.0? 啊?又来? 事后我才发现context的arch还在上一题的mips…不过好像没啥影响 我看网上的wp都是直接return到system，我tm，这也妹有啊 然后找了个syscall的解法，复刻了一下，做出来了 4. Web web会不了一点，看我上面的队伍做出的web真的是一大片一大片的，真是馋这个分啊QAQ 4.1. 牢牢记住，逝者为大 cp /flag /var/www/html解决的问题 这玩意 flag前面没/还不行，还有这个目录还在var里，像我这种都把www塞根目录下的，就很，没底 4.2. warm up 一顿上网上搜php知识，倒是做出来了 一开始md5弱比较，直接0e比较漏洞：  第二层还是弱比较，找个0e开头，md5也是0e开头的字符串：  第三层XYCTF_550102591的md5为0e937920457786991080577371025051 结果还是0e啊…直接覆盖XY和XYCTF然后0e比较  这咋还有Level2啊，看到preg_match和preg_replace直接上网搜php漏洞 preg_replace能执行，preg_match不能处理数组，php真神奇，但是我a好像直接写正则也没问题，原理我就不懂了，总之最后post了下面这个玩意 (&quot;cat /flag&quot;)&amp;c=123 4.3. ezMake 还好我写过make（逃） 直接用make的执行shell功能就能打印出flag  4.4. ezhttp 首先是看眼F12： 啊这，然后就找呗 原神，启动！ 好好好，XYCTF浏览器 好好好 改XFF 欸我tm，继续换： 试了半天用Client-IP解决了，怎么还有啊.jpg 呃啊啊啊啊啊，竟然还有 终于结束哩！ 4.5. ezmd5 上传两个图片并比较，好像要求图片不同md5相同，测试了一下，好像有图片的头几个字节就行了，上网搜有没有md5碰撞器，然后就找到了这个： 这下好说了，碰俩图片就行了： 5. Reverse 23个题啊 23个题 写题解最累的一回 5.1. Trustme 呃，直到我做完了好像才意识到这个有sql注入漏洞 类加载的时候有代理，那就看看代理 创建了个shell.apk，然后好像调用readDexFileFromApk和splitPayloadFromDex来写入这个apk readDexFileFromApk好像就是从apk中找出classes.dex 而splitPayloadFromDex则是从文件尾读了4字节的int作为大小，经查看是4459705，然后调用decrypt xor 0xFF函数写入文件4459705大小的文件， 是个新apk，拖进jadx看一眼 SQL查询数据库啊 创建db又是xor 0xFF 打开db看见flag 5.2. DebugMe 这题好像附加调试器即可，但是android studio即使开了全局调试，也需要apk开启调试功能，结果我还得重新打包apk，android版本太高还有对齐问题安装不上，总之也算坐牢了： 5.3. baby unity Il2CppDumper就行，但是在这之前记得upx unpack一下，能的出来一个26MB的script.json，用Il2CppDumper自带的ida_with_struct_py3.py能把符号加载进IDA中 可以看到操作就是b64之后xor了一下，随后解出flag 5.4. ez unity 竟然直接改的文件读取方式，而不是在读取前修复结构，看样子dump不了原文件了 但是frida-il2cpp-bridge能dump C#结构，但是导入不进IDA，看着坐牢 坐牢也看出来加密方法是AES+base64了 其中frida使用看的这个教程 posershell运行frida -p 程序PIDr -l D:\\ctf\\frida-il2cpp-bridge-0.9.0\\dist\\index.js&quot; 然后控制台敲代码就能dump C#函数了(就是不能进IDA啊QAQ)： 根据dump出来的信息能找到check函数： 接着动调找enc的flag enc flag:pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w= 这个是base64编码过的在AESEncrypt最后一句话做的b64 接着就aes解密参数 key:a216d5d34c2723f5 iv:9f68268f755b1363 flag:XYCTF{IL2CPP_1s_intere5t1ng} 5.5. 你是真的大学生吗？ 16位汇编阅读理解了属于是，当意识到是某种前后xor加密的时候一下子就出了 flag：xyctf{you_know_8086} 5.6. 喵喵喵的flag碎了一地 IDA使用教程了属于是： flag：flag{My_fl@g_h4s_br0ken_4parT_Bu7_Y0u_c@n_f1x_1t!} 5.7. 聪明的信使 移位密码了属于是 5.8. 今夕是何年 要不扔到VT上看一眼我都猜不出来是LoongArch架构，这玩意DIE看不出来啊 知道架构就好说了 5.9. ezmath 拆个包先，记得去github下个新的 然后pycdc走一个： 这稍微整理一下： 额 这要是跑Z3 那必是跑不通的 至于为啥 因为我跑了半天跑不同 但是观察到每一个flag[i]都有(flag[i]*flag[i])-(flag[i]*num)那就稍微先整理一下num吧 经过一顿手动整理： 呃 这是不是有点眼熟，尤其是这个176,178就好像那个XY 然后我除了个2，就出来了flag flag：XYCTF{q7WYGscUuptTYXjnjKoyUTKtG} 5.10. ez_enc 这样的妹妹给我来一沓 发现手算没算明白 就直接用z3秒了 5.11. ez_rand srand竟然用的int16这不爆破？ 得出flag：XYCTF{R@nd_1s_S0_S0_S0_easy!} 5.12. 何须相思煮余年 cyberchif from hex转成二进制 然后32bit拖进ida： 这就简单了，直接python交互解决(可恶 我当初为啥不保存个脚本)： 5.13. 砸核桃 有壳 脱壳 ida反编译结果是简单异或 5.14. What’s this 拖进DIE里竟然告诉我是lua 那就去查lua咋逆向好了 java -jar C:\\Users\\Munchkin7035\\Desktop\\unluac_2023_12_24.jar &quot;C:\\Users\\Munchkin7035\\Desktop\\what's this (1)&quot; &gt;&gt; out.txt output -&gt; b64 -&gt; 字符串替换 -&gt; reverse -&gt; enc 在往上找到output的赋值操作 value -&gt; +3 -&gt; output 再往上找value赋值 flag -&gt; xor 8 -&gt; value 然后通过cyberchif得出flag： 5.15. Findme 生成的密码表，咋生成的我实在不想管了，就直接抄了一遍代码 然后是配合random来插值，只要重新跑一跑代码来跳过就行 然后就能获得Dorameon3，查看一下代码 额，读入xor key，然后还不知道输出文件格式，一时间没什么思路，但是还剩可以先做一下xor14的 看到有Doraemon的字符循环，猜测把原文件的空白字节段给xor了的结果，于是猜测xor key就是Doraemon： cyberchif还贴心的识别出了这是个gif，真不错，打开看见flag 5.16. ez_cube 你会玩魔方吗，反正我不会 观察到长度只有12，操作还只有4种，那就 爆破 由于要最简操作还能做个剪枝 跑的应该挺快(大概)！ 得出flag： 5.17. easy language 易语言啊 装个易语言插件，可以补全很多函数 但是我没装中文函数补丁 就只能看j______的函数名了，总之至少看到了AES-ECB加密 ↑字符集比较 绕过debuger检测： 在这里改变RIP就行 找出密文 在比较函数附近内存能看到这个b64的字符串 在aes加密函数附近能找到这个key，动调也能发现IV得0，然后得到flag 5.18. 给阿姨倒一杯卡布奇诺 魔改xxtea，多了个sum+i flag:flag{133bffe401d223a02385d90c5f1ca377} 5.19. 馒头 手搓哈夫曼树是吧 然后就，根据字符顺序挨个把权重转化成字符即可 flag：XYCTF{xaf1svut7rojh3de0} 5.20. 舔狗四部曲–简爱 这里howtolove是个虚拟机，而src是flag{Love_is_not_one_sided_Love}，虽然我上面的tea算法好像是个fake_flag，我没太注意就没管 总之就是输入走howtolove然后和src比较，相等就行了，至于这个虚拟机怎么相等，就交给z3罢 5.21. 舔狗四部曲–相逢已是上上签 拖进DIE里 看DIE信息以为又nm来一道16位汇编题，但是IDA 16bit模式打不开，HxD打开一看&quot;This program cannot be run in DOS mode&quot;，这不是我们亲爱的DOS头吗，那这题绝对不是16位汇编了啊，那八成是魔改DOS头了，那问题来了，为啥DIE读出来DOS头了没读出来PE头呢，010 启动！ 合着PE头偏移给改了啊，那我改回去不就好了，把这个值改成100h然后拖进die： 是32位程序呢，拖进DIA里： 先是读进一个key，然后是一大坨比较，然后读入flag，通过key xxtea，最后和v6比较 先解决key的问题，用z3把他秒了： 整理一下，key就是XYCTF!，那flag也好说了，xxtea只要逆着算就能还原： flag：XYCTF{XXTEA_AND_Z3_1s_S0_easy!!} 5.22. 舔狗四部曲–记忆的时光机 好像有点花指令啊，拖进去main张这样： 看一眼汇编，呃 很显然ida没看出来这个jmp rax是啥，而且看样子好像是在main的栈上弄了个地址数组挨个jmp，那我，动调，启动！ 把一路的汇编都复制下来，然后整理就行了 main函数： 稍微整理一下： 那主函数就是读取字符串调用check了，那接下来看看check： 整理一下： 合着挨个字符enc啊，字符串在r12里，每次和下标esi一起传入enc里，然后返回加密的字符和r13的字符串比较，这加密方式 有点难崩，不过还是可以把enc flag给提出来： 然后研究enc函数： 整理前： 整理后 其中rdi是输入的字符c，rsi是输入的下表i 那操作就是 只要逆过来就是 因此写出脚本： 得到flag:flag{Br0k3n_m3m0r1es_for3v3r_Sh1n@_1n_The_H3@$T} 太痛了啊 5.23. 舔狗四部曲–我的白月光 那就逆向看看罢，这个程序好像一开始hook了MessageBoxA，改成了sub_7FF798211470，所以才会有那死循环弹窗： 那为啥这么做呢，因为他在上面刚解密了一第二部分flag（所以我才要动调啊 他那mm_load我看不懂啊）： 找到rsp也就能找到他留的信息了，把他提取出来： 啊这 我要是go back了就要往下看了哦~ 后面通过MessageBoxA手搓01可还行，而且说实话那个base64算法我到现在也没看懂，但是我动调找到规律了， 他依然是每4个b64后字符对应先前的3个字符，但是每4个b64字符都被reverse了一下，然后加密的字符串好像又被reverse了一下，总之靠着b64，from hex和reverse的排列组合，我把这段明文解出来了： 那么最后的flag是：flag{L0v3_i8_a_k3y_and_memory_never_go_done_finally_thankyou_xiaowangtongxue} "},{"title":"JavaScript混淆与babel逆向","date":"2023-12-31T16:56:05.000Z","url":"/2023/12/31/JavaScript%E6%B7%B7%E6%B7%86%E4%B8%8Ebabel%E9%80%86%E5%90%91/","tags":[["JavaScript","/tags/JavaScript/"],["AST","/tags/AST/"],["babel","/tags/babel/"],["obfuscator","/tags/obfuscator/"]],"categories":[["undefined",""]],"content":"1. 前言 babel是逆向js的一大利器，对于不了解使用babel逆向javascript的我推荐看以下这篇文章： 逆向进阶，利用 AST 技术还原 JavaScript 混淆代码 其中也有一些很有用的网站： AST explorer：可以在线解析AST树，在分析代码的过程中很有帮助，使用时记得在网站顶部把编译器换成@babel/parser。 @babel/types文档：查babel的node名称和属性基本上就靠他了。 Babel 插件手册：介绍了如何使用babel进行AST转换。 但是在实际使用中，由于babel的特性/bug比较多，逆向过程中会有很多问题，所以才有了这么一篇踩坑文章。 2. babel特性 由于在AST转换过程中直接给node赋值无法自动修改node中包含的引用，所以要在path上使用replaceWith函数进行替换node，但是这个replaceWith函数本身就有很多特性，所以会在使用的时候有很多意料之外的情况，具体来说他会： 在replaceWtih后不会删去原来node包含的引用(references、referenced和referencePaths) replaceWith增加的新节点不一定会添加引用(没有仔细测试，貌似如果一个node经过两次clone他就无法在replaceWith时增加引用?) 同样replaceWith也不会更新constantViolations 同时traverse也会有一些神奇的特性，比如在使用path.traverse的时候，不会遍历到path节点，这就会导致有时候traverse结果和想象中的不一样。 总之我们在使用babel进行逆向去混淆的过程中一定要仔细处理node中包含的引用，否则ast中错误的reference会对后续的去混淆造成影响，无论是存在无效的reference（导致节点始终在被引用的状态，且遍历reference时node可能无效）还是缺少reference（在根据reference处理node时可能会造成某些node遗漏未被处理）。 2.1. 解决方案 对于这种replaceWith无法很好的更新引用的情况，我们可以在replaceWith前后手动修复引用，但是对于constantViolations，我实在是不想处理了： 3. JavaScript逆向 3.1. 字符串编码 我们先来考虑一些简单的场景：字符串编码混淆 AST树： 在逆向的过程中可以使用以下Visitor反混淆： 由于根据babel文档，StringLiteral只有value属性是必须的有的，所以直接删掉extra属性就行了。 3.2. 无用变量 在反混淆的过程中随着代码简化，会有很多变量不再被引用，此时我们可以通过如下Vistor去除： 其中constantViolations可能不太好理解，举个例子，以下两行代码（即a的赋值和a的自增）均会增加a的constantViolations： 目前来看还有留着这种变量的需要，因为有的时候变量值不重要但是赋值操作很重要，比如如下情况： 这种情况下虽然a没有reference但是删掉a会导致eval(b)消失，从而导致代码逻辑错误。 3.3. const变量 其中只要找到type为const的VariableDeclaration并在其中找init类型为Literal或Identifier的常量，替换其中的引用即可。 Visitor如下： 3.4. 多余逻辑判断 其中IfStatement包含test、consequent、alternate三个node，alternate可以为null，我们可以根据test计算结果来替换分支逻辑。 而WhileStatement包含test和body，只有在test结果为false时才可以把整个While删去。 Visitor如下： 3.5. 多余的BlockStatement块 有时候我们在替换node后有些BlockStatement块就显得多余了，比如： 此时AST如图： 此时我们可以判断replaceWith的node是否为BlockStatement，如果是他的body数组长度是否为1，如果为1我们可以直接用他的body[0]去替换这个BlockStatement。 我们将上文的replaceWith改成如下形式即可达到replace的过程中自动化简BlockStatement的目的： 3.6. 表达式混淆 对此我们可以尝试对表达式求值，如果evaluate结果为confident我们就可以用value做替换： 3.7. 以数组下标方式访问成员函数 AST树： 其中访问成员函数的node为MemberExpression，其中computed变量代表是否以数组下标方式访问，property为访问的函数名称，这里将computed设置为false并将property设置为字符串的值来还原成员函数的访问。 反混淆用的Visitor代码： 3.8. 替换执行函数 此时func里面可能包含一些反反混淆代码，可能是debuger检测，也可能是代码格式化检查等。如果我们希望自己定义func并执行计算结果就可以用如下Visitor 3.9. 控制流平坦化 AST树： 我们可以根据MemberExpression去找他引用的对象，然后去对象的init.properties找字典对应的值，然后把这个值给替换过来： 运行后效果如下: 首先不得不承认它更丑了，但你就说控制流平坦化解没解决吧(大雾)，上面的var a可以用removeSymbolVisitor去除，而下面的FunctionExpression我们后续再处理。 3.10. 函数调用混淆 这两种情况我们分开考虑，对于FunctionDeclaration我们只要将函数a给内联即可，随后他会变成第二种FunctionExpression的状态，首先我们要确定我们可以inline的代码，对于复杂的函数我们不动： 这个代码会判断一个函数是否只有一个return代码块，只有满足条件才会返回true。 其次这个函数还不能递归，递归内联的话就寄了： 然后我们遍历FunctionDeclaration，将所有满足调教的函数从FunctionDeclaration内联成FunctionExpression，这个过程要仔细处理变量引用，相当的麻烦： 这时候我们再来处理FunctionExpression，我们遍历所有CallExpression，检查调用的目标是否为FunctionExpression，这个FunctionExpression也有id属性，因此FunctionDeclaration该做的检查他是一点都不能少啊： 然后我们实现具体的内联功能，其中functionExpression的params真的是多种多样，而引用一处理不好也会寄，总之直接看代码吧： 3.11. 使用switch的控制流平坦化 这里我们找到控制执行流程的数组，然后按照数组顺序还原代码即可： 4. 后记 文章里出现的visitor可以在visitor.js中找到，代码未经过严格测试，可能包含一些bug(至少已知不会处理path的constantViolations值，并且在内联函数的过程中不会处理通过arguements访问的参数)，但是日常使用应该问题不大，总之babel很强大，但是bug少点就好了(悲)。"},{"title":"红米Note 12T Pro使用体验","date":"2023-12-18T12:25:48.000Z","url":"/2023/12/18/%E7%BA%A2%E7%B1%B3Note-12T-Pro%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/","tags":[["小米","/tags/%E5%B0%8F%E7%B1%B3/"],["Redmi Note12T Pro","/tags/Redmi-Note12T-Pro/"],["root","/tags/root/"],["QAuxiliary","/tags/QAuxiliary/"],["哔哩漫游","/tags/%E5%93%94%E5%93%A9%E6%BC%AB%E6%B8%B8/"]],"categories":[["undefined",""]],"content":"1. 基本信息 1.1. 硬件信息 手机型号 Redmi Note12T Pro 处理器 天玑8200-Ultra 运行内存 8G+5G扩展内存 储存空间 256GB 电池容量 5080mAh(typ) 充电功率 67W 屏幕尺寸 6.6英寸 刷新率 144Hz 分辨率 2460*1080像素 摄像头 前置16MP 后置64MP+8MP+2MP USB接口 USB2.0 type-C WIFI 支持Wifi直连、Wifi passpoint、Wfi6E 重量 200g 1.2. 软件信息 安卓版本 13 MIUI版本 MIUI 14.0.5 1.3. 跑分数据 安兔兔 V10.1.6 总分 865774分 CPU 229689分 GPU 234966分 MEM 181542分 GeekBench 6.2.2 CPU性能 单核分数 1301分 多核分数 3879分 GPU性能 OpenCL分数 4186分 Vulkan分数 4521分 呃，总结就是性能一般价格一般内存很小的一款机型，并且有谷歌服务，价位与Note 11T Pro相同，是1400左右，(感觉不如Note 11T Pro)，最近又查了一下价格，京东百亿补贴，Note12T Pro 12G内存版本和8G内存版本卖一个价，非常的难蚌，只能说我买的时间不赶巧吧(悲)。 顺便说一下这个机型目前是没有第三方ROM和TWRP的，感觉，输麻了，尽管第三方ROM也有SIM卡和信号问题，但还是非常的难蚌。 2. 原版系统使用体验 刚到手的手机用了一段时间，碰到了不少问题，但是由于我没更新MIUI系统，所以不清楚这些问题在新系统中知否会得到结局。 其中最大的感受就是杀后台特别严重，打个游戏看QQ需要重头启动QQ，看完QQ回到游戏又要重新启动游戏，相当折磨的体验了。 其次会碰到一些玄学的bug，比如：网易云在使用的过程中不会出现在通知栏，导致不能在通知栏中切换音乐。而bilibili即使禁用通知，媒体播放也会常驻在通知栏中删不掉，非常难受了属于是，但是这俩问题我都通过降级APP版本得到了解决，一时间难分到底是谁的锅。 而且在设置应用双开的过程中，主程序和双开程序的通知权限是共同的，单独开启或关闭一个程序的通知权限会同影响到另一个程序，直接导致了我没法直接系统层面上去禁止QQ分身的通知权限，而这段时间QQ的元梦之星广告又铺天盖地，在QQ内部禁止通知也拦不住元梦之星的广告，非常的无语。 除此之外还有安装apks需要关闭MIUI优化、小米备份功能还原出来的应用一大堆打不开需要重装，进入安全模式再重启桌面图标位置会乱等小bug也十分影响使用体验。 当然刚使用MIUI也会有一些不喜欢的设计，比如音量过大影响听力警告、每隔三天必须输入一次密码解锁防止遗忘密码等。 总之，用起来就好像在说&quot;你快来root我吧&quot;，然后他就被root了。 我寻思这手机性能参数全都比我旧手机好，这使用体验咋还倒退了呢 3. 搞机部分 3.1. 解锁BL锁 搞机首先要解BL锁，这个去开发者选项-&gt;设备解锁状态中绑定小米账号后等7天，然后用小米解锁BL锁工具解锁就可以了。 解锁大概只需要10几秒时间，解锁之后手机会重置系统，到时候会清除所有数据，记得提前备份。 3.2. 基础设置 手机重启完后会恢复出厂设置，因此需要重新设置一遍导航栏、通知栏、解锁密码、指纹解锁等配置，并关闭系统自动更新、安装应用资源推荐、应用安全检查、安全守护、负一屏、搜索框、桌面上滑打开看点新闻(谁想出来的玩意呢)、卸载应用自动补位等操作，还要在设置中搜索广告来关闭个性化广告推荐和系统广告、在省电与电池的设置中关闭异常耗电提醒和省电建议和耗电问题提醒，此外还看需求是否需要开启通话录音、录音机里应用通话录音等功能，总之事情相当多。 3.3. 删除预装应用 这里我删了太多应用导致到最后我都不记得删过什么东西了，大致是先通过小米卸载一波能直接卸载的包(比如手机管家可以发现小米能直接卸载而不用担心会卡米)，再通过adb卸载一波不能从手机上直接卸载的包(注意安全不要卸载过头，不想卸载的话通过disable-user禁用也可以)。 有一点要注意的是com.miui.guardprovider虽然能卸载，但是卸载后会导致adb install无法使用，是相当难受的一点(后期可以装LSPosed模块解决)。 3.4. 启用安卓自带的包管理器 adb执行指令adb shell pm install-existing com.android.packageinstaller 可以用于在小米自带的包管理器不可用的情况下安装app 3.5. 刷入magisk KernelSU?不熟，没研究过，使用KernelSU获取root权限并安装模块不在这次搞活范围内。 刷入magisk总共分两步，首先是修补boot，其次是刷入boot。 修补boot只要下载和当前小米系统版本相同的ROM包，然后提取boot.img，发送到手机使用magisk app进行修补，之后传回电脑就可以了。 刷入boot需要把手机重启至fastboot模式，然后通过adb指令刷入boot即可(手残，每次切换到fastboot都要重启好几次，很烦)。 刷boot刷寄了大概就需要线刷刷ROM来解决了吧，但是我还没寄过所以没救过砖。 再次启动手机进入magisk后会提示你修补boot，点确定后再次重启就能获取root了。 magisk刷好后就是一些常规设置了，什么隐藏magisk应用、开启DoH、开启Zygisk、开启root身份验证之类的。 3.6. 安装救砖模块 如果magisk安装模块导致无法开机可以通过长按电源键+音量加键进入rec模式，选择以安全模式启动，在成功启动后重启手机即可关闭所有magisk模块(感谢来自magisk的救砖检测) 但是，再来个双层保险他不香吗，于是我又安装了个自动神仙救砖-支持OTA稳定白名单版v4，如果系统连续启动到3次或卡在开机界面2分钟，将自动禁用所有模块。 3.7. 隐藏root (现在隐藏root好像很直接的样子，安装个shamiko就行了) 现在隐藏root确实安装个shamiko就行了，追求更高级的隐藏root还是去找KernelSU好了，安装后在magisk里设置排除列表就可以对特定的app隐藏root了，注意不要开启&quot;遵守排除列表&quot;。 在隐藏完root后可以安装momo对root进行检测，到目前未知momo的检测结果应该是找到可疑痕迹，ootloader未锁定。 (看得出来这两个应用作者是真的喜欢街角魔族) 之后安装什么软件如果不需要root带来的特性的话就都进入屏蔽root列表好了。 3.8. 安装lsposed 安装lsposed没什么难的，去github下载zygisk版本lsposed，安装进magisk即可。 3.9. 安装Shizuku 一个用于授予系统API权限的程序，可以用来给R-安装组件、MT管理器、Clash的APP授权，记得在APP里设置开机启动，然后在系统设置里开启自启动和允许后台运行(没错，不开允许后台运行他也不能开机启动)，否则每次重启手机都需要手动开启Shizuku才可以获得权限。 3.10. 安装R-安装组件 由于一些众所周知的原因，用于替换小米自带的应用包安装器，安装后即可使用，安装后可以在R-安装组件的设置中设置为默认安装器，并设置省电策略为无限制以便后台运行。 3.11. 安装Scene6 如果要开启swap设置的Magisk模块务必使用scene6而不是scene4 否则卡米 Scene6可以修改手机的调度，安装后可以在调节界面里面修改Soc的调度规则，这里我用的是Uperf-Game-Turbo的均衡模式，开启动态响应，使用下来调度感觉比原版好很多，少了很多小卡顿。 Sence6可以设置的东西还有很多，比如CPU控制、SWAP设置、耗电统计、应用偏见等，还自带了一个magisk仓库，在附加功能里还有很多MIUI专属、AOSP专属、MTK/天玑专属功能和一些其他的小工具，甚至在附加功能的杂项里还有一个maisk自救模块，东西相当多了。 Sence6还可以记录游戏帧率，CPU和GPU负载，对游戏调度分析也很有帮助。 3.12. 安装MT管理器 MT管理器是个相当好用的文件管理器(但是好像挺多东西不支持以文本形式直接打开)，里面还带了一个终端模拟器和Activity记录工具，非常的方便。 3.13. 修改host 有时候我们在谷歌上搜索小米 隐私 屏蔽 host这几个关键词后可能会想要屏蔽一些host，这时候需要到magisk的设置中安装Systemless Hosts，并通过MT管理器编辑/data/adb/modules/hosts/system/etc/hosts来达到屏蔽某些域名的效果。 3.14. 安装AntiAntiDefraud 直接去github下载安装即可。 3.15. 安装氯氡氟 可以用来解决卸载com.miui.guardprovider后adb install无法使用的问题。 3.16. 安装米客 可以修改大量的系统设置，什么禁用高音量警告、禁用声音闪避、显示蓝牙电量、添加5G开关、允许降级安装应用、禁用签名检查、禁用安全内容保护、隐藏低电量警告都可以做到，此外还有一堆定制MIUI的设置，相当强大的存在。 米客设置 模块-系统-声音：禁用高音量警告 模块-系统-声音：禁用闪避 模块-系统-通知：允许修改任何应用的通知（但是修改安卓的通知权限重启后会被重置） 模块-系统-通知：开放通知的重要程度 模块-系统-控制中心：5G开关 模块-系统-锁屏-安全：取消每72小时执行一次强制认证的要求 模块-系统-其他：查看已保存Wi-Fi密码 模块-系统-其他：允许降级 模块-系统-其他：禁用签名认证 模块-系统-其他：禁用安全内容保护 模块-系统-其他：隐藏低电量警告 模块-杂项-解锁手机管家特性：跳过开启特殊权限的倒计时 模块-杂项-解锁手机管家特性：跳过安全体检 模块-杂项-设置：显示附加应用详情 3.17. 安装dia dia可以禁用某些Activity并修改程序入口点，这对跳过首屏广告很有用，具体Activity名可以通过MT管理器的Activity记录工具记录，记录完再回到dia中设置。 dia还可以禁用通知、禁止联网、现实隐藏按钮、取消按钮禁用、反禁用Xposed，隐藏Xposed和root等，也是个相当强的存在。 记得经常备份dia配置，以免dia配置因bug消失 3.18. 安装3C一体工具箱 一个很好用的系统性能监控程序，什么使用情况管理、任务管理、设备管理、应用管理、电池管理、网络管理、CPU管理。系统管理都有，甚至还有SQLite管理器和ROM管理器，也是一个相当强大的存在，但是主要被我用来设置Linux防火墙，用来禁止应用联网(像输入法、相册、系统更新之类的不该联网的应用联网功能就都关上罢)，记得设置完保存到开机启动中(最顶部有一个写着开字的圆形图标)，否则手机重启后设置会消失。 记得经常备份3C一体工具箱配置，以免开机启动失败后配置文件消失 3.19. 安装GKD(可选) 一个靠无障碍功能自动点击关闭广告的程序，可是我不是很喜欢无障碍功能，就没有使用，需要的可以自己去安装。 3.20. 安装termux(可选) 一个终端模拟器，好用但是暂时没使用终端的需求。 3.21. 安装autojsx(可选) 靠无障碍功能自动化点击的脚本，也可以用来看页面布局，activity名称之类的，但是暂时也没看界面布局或自动化的需求。 3.22. 安装Activity Manager(可选) 可以在桌面设置快捷方式来直接打开某些app的Activity来实现跳过首屏广告的目的，如果有root也可以用来设置那些未导出的Activity，但是这个需求被dia替代了，所以也没有什么装的必要，如果没有root的话也许还能用得上(?) 3.23. 安装幸运破解器(可选) 可以用来去除谷歌广告，也可以用来设置应用权限，设置activity的活动状态，也会有一些自定义破解脚本可以用，也有破解谷歌内购的功能，但是大多靠修改APP安装包实现，既然都有root和magisk了就没啥使用幸运破解器的需求了。 如果破解谷歌内购需要在设置中允许幸运破解器可以自启动并允许后台运行以便破解内购功能正常运行 3.24. 安装Miui主题破解(可选) 可以用来在主题商店-主题中从SD卡导入第三方主题。 4. 安装日用程序 4.1. 谷歌play 在系统设置中开启谷歌基础服务后，在小米应用商店中搜索谷歌play，点击更新即可看到被隐藏的谷歌play，登陆后可以看需求是否关闭play安全机制。 (Play保护机制：QQ企图规避Android的安全保护措施，是否卸载) 4.2. 安装Bitwarden(可选) 一个密码管理器，好处是可以在好几个浏览器之间同步用户名和密码，如果有特殊需求的话也可以自己建立服务器来保存密码，当然用其他替代品也行，看个人习惯，安装后可以看需求开启生物识别解锁、PIN码解锁等解锁方式。 4.3. 安装firfox 现在firefox在手机上也能装插件了，在谷歌play中搜索firfox即可安装，安装后可以安装AdGuard广告拦截器、Bitwarden - 免费密码管理器、Tampermonkey等插件。 4.4. 安装Google Authenticator(可选) 谷歌出的双步验证器，当然用其他替代品也可以，看个人习惯。 4.5. 安装输入法 这个纯看个人习惯了，安装完可以卸载默认的百度输入法和讯飞输入，自带的搜狗输入需要通过adb禁用或删除。 4.6. 安装谷歌相机(可选) 没调教明白，效果不如小米自带的相机，寄。 4.7. 安装QQ 这里安装的QQ 8.9.50版本，没有使用play版是因为play版真用不习惯，QQ的体验模式和青少年模式也是用不习惯，UI变化太大了，大陆版在测试的时候使用8.9.2及以前的版本都明确不让登录，由于懒得测试那么详细就直接选择8.9.50版本了。 安装完QQ后设置应用双开、登录账号，去隐私里设置关闭各种默认打开的东西(什么输入状态之类的)，再去辅助功能里关闭文字特效、怼图等功能(他为啥不同步一下设置啊 恼)，然后安装QAuxiliary来屏蔽QQ花里胡哨的功能并看需求安装QQ瘦身，如果启用了QQ分身，lsposed插件也需要在XSpace中再安装一份，其中QA的配置可以直接导出，然后在分身中导入使用。 以下是我QQ相关的设置： QQ设置 资料卡-设置：关闭展示超级QQ秀 资料卡-设置-资料展示设置：看情况设置所有人不可见 资料卡-设置-资料展示设置：看情况开启展示卡(仅保留个性标签、QQ等级等) 空间：直接注销(注销后也能看别人空间) 联系人-订阅号：该取消关注的都取消关注 动态-更多：删除全部业务 动态-样式选择：好友动态 设置-隐私-发现我的方式：QQ号、QID 设置-隐私-加我为好友的方式：关闭通讯录、QQ频道、超级QQ秀、小世界 设置-隐私-权限设置：关闭允许陌生人赞我，禁止陌生人邀请我加入群聊 设置-隐私-展示设置：关闭我的网络状态、我的输入状态、我的勋章强、王者段位&amp;会员称号、靓号群主身份、聊天列表会员彩色昵称、STAR会员和大会员铭牌(这是啥啊)、QQ达人及连续登陆天数 设置-隐私：关闭个性签名同步到说说 设置-隐私：关闭可通过系统通讯录发起QQ聊天 设置-通用：开启夜间模式跟随系统 设置-辅助功能-超级QQ秀设置-形象展示：关闭超级QQ展示 设置-辅助功能-超级QQ秀设置-隐私：关闭允许游戏内加我为QQ好友 设置-辅助功能-超级QQ秀设置-隐私：关闭展示我的乐园成绩 设置-辅助功能-超级QQ秀设置-关注和粉丝列表权限设置：设置为私密 设置-辅助功能-超级QQ秀设置-隐私-小窝权限设置：设置为私密 设置-辅助功能-超级QQ秀设置-通用：关闭消息通知 设置-辅助功能：关闭表情推荐 设置-辅助功能：关闭文字特效 设置-辅助功能：关闭怼图 设置-辅助功能-主页底部导航栏设置：关闭频道，不显示小世界 设置-辅助功能-更多功能设置：关闭摇动手机截屏、关闭QQ提醒好友生日 设置-辅助功能-个人信息保护设置-个性化推荐设置-微视/小世界/QQ电商/QQ直播：关闭个性化推荐 设置-辅助功能-个人信息保护设置-广告推荐设置：关闭个性化广告 QAuxiliary-净化设置-主页-标题栏：隐藏下拉小程序 QAuxiliary-净化设置-主页-标题栏：屏蔽主页面相机/小世界图标 QAuxiliary-净化设置-主页-标题栏：屏蔽主页超级QQ秀图标 QAuxiliary-净化设置-主页-标题栏-精简主页对话框：勾选一起派对 QAuxiliary-净化设置-主页-标题栏：屏蔽好友推过 QAuxiliary-净化设置-主页-标题栏：移除消息列表顶栏横幅广告 QAuxiliary-净化设置-主页-消息列表：隐藏有新帖红字 QAuxiliary-净化设置-主页-消息列表：禁止群助手中的群有新帖时显示在主页 QAuxiliary-净化设置-主页-联系人-联系人排序：排序忽略VIP状态 QAuxiliary-净化设置-主页-动态：隐藏空间好友热播和广告 QAuxiliary-净化设置-主页-动态：屏蔽空间滑动相机 QAuxiliary-净化设置-侧滑栏-侧滑栏精简：仅保留夜间模式、我的收藏、我的文件 QAuxiliary-净化设置-侧滑栏：移除侧滑栏左上角打卡 QAuxiliary-净化设置-侧滑栏：隐藏侧滑栏厘米秀 QAuxiliary-净化设置-侧滑栏：隐藏QQ钱包超值精选 QAuxiliary-净化设置-侧滑栏：隐藏侧滑面板的VIP图标 QAuxiliary-净化设置-聊天界面-消息：强制使用系统Emoji QAuxiliary-净化设置-聊天界面-消息-精简聊天气泡长按菜单：勾选一起写、待办、私聊、截图、存微云、提醒 QAuxiliary-净化设置-聊天界面-消息：强制使用默认字体 QAuxiliary-净化设置-聊天界面-消息：屏蔽掉落小表情 QAuxiliary-净化设置-聊天界面-装扮：强制使用默认气泡 QAuxiliary-净化设置-聊天界面-装扮：隐藏送礼动画 QAuxiliary-净化设置-聊天界面-装扮：屏蔽所有进场特效 QAuxiliary-净化设置-聊天界面-装扮：屏蔽头像挂件 QAuxiliary-净化设置-聊天界面-表情-精简表情菜单：净化热门表情、厘米秀、DIY表情、魔法表情、超级QQ秀 QAuxiliary-净化设置-聊天界面-表情：禁止秀图自动展示 QAuxiliary-净化设置-聊天界面-表情：禁止弹射表情 QAuxiliary-净化设置-聊天界面-其他-精简加号菜单：净化王者好礼、超级粉丝团、视频包厢、一起K歌、厘米秀、一起排队、一起听歌、一起玩、一起看、热图、礼物、送礼物、健康收集、直播间、坦白说、群课堂、屏幕分享、涂鸦 QAuxiliary-净化设置-聊天界面-其他：禁用$打开送礼界面 QAuxiliary-净化设置-群聊-标题栏：隐藏一起听歌 QAuxiliary-净化设置-群聊-标题栏：屏蔽群聊界面一起嗨 QAuxiliary-净化设置-群聊-标题栏：隐藏聊天界面VIP图标 QAuxiliary-净化设置-群聊-其他：屏蔽群聊炫彩昵称 QAuxiliary-净化设置-群聊-其他：禁用右滑切换群帖子 QAuxiliary-净化设置-资料卡：屏蔽DIY名片 QAuxiliary-净化设置-资料卡：隐藏资料卡气泡 QAuxiliary-净化设置-杂项：隐藏小程序开屏广告 QAuxiliary-净化设置-杂项：去除是否继续接收弹窗 QAuxiliary-净化设置-杂项：隐藏QQ空间此刻按钮 QAuxiliary-净化设置-杂项：屏蔽好友资料页送礼按钮 QAuxiliary-净化设置-杂项：去你大爷的QQ浏览器 QAuxiliary-净化设置-杂项：隐藏会员红名 QAuxiliary-净化设置-杂项-精简底栏：只保留联系人、动态、空间 QAuxiliary-净化设置-杂项-精简设置菜单：精简达人、免流量 QAuxiliary-净化设置-杂项：屏蔽更新 QAuxiliary-净化设置-杂项：移除内置浏览器菜单栏的&quot;QQ浏览器&quot; QAuxiliary-净化设置-杂项：屏蔽截屏分享 QAuxiliary-辅助功能-聊天和消息-聊天：批量撤回消息 QAuxiliary-辅助功能-聊天和消息-聊天：修改@界面顺序 QAuxiliary-辅助功能-聊天和消息-聊天：自动发送原图 QAuxiliary-辅助功能-聊天和消息-聊天：自定义猜拳骰子 QAuxiliary-辅助功能-聊天和消息-聊天：显示设置禁言的管理 QAuxiliary-辅助功能-聊天和消息-聊天：允许各种消息左滑回复 QAuxiliary-辅助功能-聊天和消息-消息：转发消息点头像查看详细信息 QAuxiliary-辅助功能-聊天和消息-消息：转发时轻质开启多选用户/群组 QAuxiliary-辅助功能-聊天和消息-消息：自动移除apk文件后的.1 QAuxiliary-辅助功能-聊天和消息-消息：以图片方式打开闪照 QAuxiliary-辅助功能-聊天和消息-消息：优化消息中的IPv6链接 QAuxiliary-辅助功能-聊天和消息-消息-防撤回：开启总开关 QAuxiliary-辅助功能-聊天和消息-频道：频道复制卡片消息 QAuxiliary-辅助功能-聊天和消息-频道：频道防撤回消息 QAuxiliary-辅助功能-文件与储存：群文件重命名 QAuxiliary-辅助功能-文件与储存：群文件长按转永久 QAuxiliary-辅助功能-文件与储存：重命名base.apk QAuxiliary-辅助功能-好友和资料卡-好友：被删好友检测通知 QAuxiliary-辅助功能-好友和资料卡-好友：显示历史好友入口 QAuxiliary-辅助功能-好友和资料卡-好友：显示加好友来源参数 QAuxiliary-辅助功能-实验性功能：跳过扫码风险登录五秒确认 QAuxiliary-辅助功能-实验性功能：允许上传透明头像和表情 QAuxiliary-辅助功能-实验性功能：允许群名带表情 QAuxiliary-辅助功能-娱乐功能：去除戳一戳时间限制 QAuxiliary-辅助功能-娱乐功能：关闭大号Emoji QAuxiliary-辅助功能-杂项：伪装处于非多窗口模式 QAuxiliary-辅助功能-杂项：伪装网络类型为移动网络 QAuxiliary-辅助功能-杂项：禁用浏览器X5内核 QAuxiliary-辅助功能-杂项：修复拒绝加群原因北京 QAuxiliary-辅助功能-杂项：禁用内置浏览器网页拦截 4.8. 安装微信 微信相比较QQ已经是相当收敛了的，尽管他也一点都不小。这里我没有选择微信某个特定的版本，毕竟还没感受到广告糊脸，安装完可以在lsposed安装一个微X模块，主要是用来防撤回，其他的功能可以自己挖掘。 4.9. 安装B站 这里安装的是B站的7.20.0版本。最近B站广告真的是太过分了，而且版本太低B站会直接闪退，这个版本配合B站漫游(记得开启隐藏功能)能得到一个相对干净的B站，目前做过的设置有： B站设置 弹幕设置-弹幕优选模式：超级 弹幕设置-按类型屏蔽：重复、底部、彩色、高级 编辑播放器：关闭杜比音效、充电、视频推荐、截图 设置-安全隐私-空间隐私设置：全部关闭 设置-首页推荐设置-首页自动播放：关闭自动播放 设置-播放设置-自动播放设置-动态/活动页单列视频是否自动播放：关闭自动播放 设置-播放设置-自动播放设置-首页自动播放：关闭自动播放 设置-播放设置-小窗播放/后台播放设置：关闭播放被中断时自动小窗播放 设置-播放设置-小窗播放/后台播放设置：关闭应用内自动小窗播放 设置-播放设置-其他播放设置：关闭全屏播放画面展示同时在看人数 设置-播放设置-其他播放设置：启用https播放 设置-推送设置：关闭接收消息通知总开关 设置-其他设置：关闭WIFI下自动准备安装包 设置-其他设置：关闭截屏快捷分享 设置-深色模式：开启深色跟随系统 设置-隐私权限设置：禁止哔哩哔哩查看电话信息 设置-隐私权限设置：禁止哔哩哔哩访问位置信息 设置-隐私权限设置：禁止哔哩哔哩访问日历信息 设置-隐私权限设置：仅在使用中允许哔哩哔哩使用相机功能 设置-隐私权限设置：禁止哔哩哔哩使用麦克风功能 设置-隐私权限设置-个性化广告推荐管理：关闭个性化广告推荐 设置-隐私权限设置：关闭哔哩哔哩广告访问传感器 设置-隐私权限设置：不允许我发布的内容在校园中展示 设置-隐私权限设置：禁止把我推荐给可能认识的人 哔哩漫游设置-解锁番剧限制：解锁番剧限制 哔哩漫游设置-解锁番剧限制：允许下载版权番剧 哔哩漫游设置-美化：关闭看一看按钮 哔哩漫游设置-美化：点击首页头像跳转&quot;我的&quot;页面 哔哩漫游设置-杂项：关闭青少年模式弹窗 哔哩漫游设置-杂项：去你大爷的小程序 哔哩漫游设置-杂项：显示AV号 哔哩漫游设置-杂项：替换竖版视频 哔哩漫游设置-杂项：净化分享 哔哩漫游设置-杂项：修复UP主空间 哔哩漫游设置-杂项：解锁播放限制 哔哩漫游设置-杂项：在外部浏览器打开 哔哩漫游设置-杂项：禁止滑动切换直播间 哔哩漫游设置-杂项：禁用直播间双击点赞 哔哩漫游设置-杂项：禁止App检查更新 哔哩漫游设置-杂项：禁止评论引导 哔哩漫游设置-杂项：禁止首页自动刷新 哔哩漫游设置-杂项：禁止自动转到动态 哔哩漫游设置-杂项：过滤渐变色弹幕 哔哩漫游设置-隐藏功能：开启隐藏功能 哔哩漫游设置-隐藏功能-自定义底栏：关闭发布和会员购 哔哩漫游设置-隐藏功能：净化游戏中心 哔哩漫游设置-隐藏功能-自定义我的界面：仅保留离线缓存、历史记录、我的收藏、稍后再看 哔哩漫游设置-隐藏功能：净化我的页面红点 哔哩漫游设置-隐藏功能：净化开屏页面 哔哩漫游设置-隐藏功能：净化搜索页面 哔哩漫游设置-隐藏功能-净化首页标签：勾选直播、影视、韩综、其他(此时首页仅保留推荐、热门、番剧) 哔哩漫游设置-隐藏功能-净化首页推荐内容：勾选广告（含推广）、游戏、横幅（轮播图）、通知（追番更新、活动提示）、直播 哔哩漫游设置-隐藏功能：屏蔽视频下方推荐（这个是推荐广告，不是视频推荐） 哔哩漫游设置-隐藏功能：禁用免费试看大会员清晰度 哔哩漫游设置-隐藏功能-净化动态：移除同城标签、移除校园标签、移除最热话题（综合）、移除最常访问（综合）、移除最常访问（视频）、屏蔽无权查看动态（例如充电专属）、屏蔽跳转广告动态（例如&quot;UP主的推荐&quot;） 哔哩漫游设置-隐藏功能-净化动态：按类型屏蔽广告 哔哩漫游设置-隐藏功能：移除视频下方的相关推广 哔哩漫游设置-隐藏功能：移除视频下方的获得荣誉 哔哩漫游设置-隐藏功能：移除视频悬浮窗 哔哩漫游设置-隐藏功能：屏蔽UP主推荐广告 哔哩漫游设置-隐藏功能：屏蔽视频详情页广告 哔哩漫游设置-隐藏功能：屏蔽直播预约 哔哩漫游设置-隐藏功能：移除UP大会员表示 哔哩漫游设置-隐藏功能-净化直播间浮窗：勾选全部 哔哩漫游设置-隐藏功能：禁止下载App基础组件库 哔哩漫游设置-隐藏功能：移除我的大会员横幅 4.10. 安装网易云 这里用的网易云版本是8.0，其中8.20广告太过分，8.6有直播广告，7.0到8.0感觉广告数量没啥变化但是ui变化挺大，而且再老也找不到了，就选用了8.0版本。 网易云首屏广告可以通过Dia把入口Activity设置为com.netease.cloudmusic.activity.MainActivity并禁用以下Activity来屏蔽： 5. 后记 小米的手机型号命名以及定价到底有什么规律，太难蚌了，价格仅供参考，不同店家价格不同，上下浮动一两百都可能，没有仔细查： 型号 SOC socpk.com分数 内存 存储 价格 Redmi Note 12 Turbo 骁龙 7+ Gen2 136.5 16GB 1TB 2099 Redmi Note 12 Turbo 骁龙 7+ Gen2 136.5 12GB 256GB 1699 Redmi Note 12T Pro 天玑 8200-Ultra 121.4(天玑 8200) 12GB 512GB 1699 Redmi Note 12T Pro 天玑 8200-Ultra 121.4(天玑 8200) 12GB 256GB 1399 Redmi Note 12 Pro 天玑 1080 70.7 12GB 256GB 1699 Redmi Note 12 骁龙 4 Gen1 55.2 8GB 256GB 1099 Redmi Note 11T Pro 天玑 8100 118.6 8GB 512GB 1699 Redmi Note 11T Pro 天玑 8100 118.6 12GB 256GB 1399 Redmi Note 11T Pro+(120W快充) 天玑 8100 118.6 8GB 512GB 1699 Redmi Note 11T Pro+(120W快充) 天玑 8100 118.6 12GB 256GB 2099 以及，在手机上能看到16G内存和1T储存，确实非常震惊，这比不少人的电脑配置都高了。"}]